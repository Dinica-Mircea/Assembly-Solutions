     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 20                          a db 20h
    15 00000001 0002                        b dw 200h
    16 00000003 40440300                    c dd 34440h
    17 00000007 0020000000000000            d dq 2000h
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; adunari si scaderi setul 1
    22                                          ; 1.c-(a+d)+(b+d)=34440h- (20h+2000h)+(200h+2000h)=32420h-2200h=30220h
    23                                          ; a - byte, b - word, c - double word, d - qword - Interpretare cu semn
    24 00000000 A0[00000000]                            mov AL,[a]
    25 00000005 A0[00000000]                    mov AL,[a] ;AL=a
    26 0000000A 6698                            cbw;AX=a
    27 0000000C 98                              cwde;EAX=a
    28 0000000D 99                              cdq ;EDX:EAX=a
    29 0000000E 8B1D[07000000]                  mov EBX,dword[d+0]
    30 00000014 8B0D[0B000000]                  mov ECX,dword[d+4] ;ECX:EBX=d
    31 0000001A 01C3                            add EBX,EAX
    32 0000001C 11D1                            adc ECX,EDX ;ECX:EBX=a+d=2020h
    33 0000001E A1[03000000]                    mov EAX,[c];EAX=c
    34 00000023 99                              cdq;EDX:EAX=c
    35 00000024 29D8                            sub EAX,EBX ;
    36 00000026 19CA                            sbb EDX,ECX ;EDX:EAX=c-(a+d)=34440h-2020h=32420h
    37 00000028 89C3                            mov EBX,EAX
    38 0000002A 89D1                            mov ECX,EDX ;EBX:ECX=c-(a+d)=34440h-2020h=32420h
    39 0000002C 66A1[01000000]                  mov AX,[b];AX=b
    40 00000032 98                              cwde;EAX=b
    41 00000033 99                              cdq;EDX:EAX=b
    42 00000034 0305[07000000]                  add EAX,dword[d+0]
    43 0000003A 1315[0B000000]                  adc EDX,dword[d+4]; EDX:EAX=b+d=200h+2000h=2200h
    44 00000040 01D8                            add EAX,EBX
    45 00000042 11CA                            adc EDX,ECX; EDX:EAX=c-(a+d)+(b+d)=34440h- (20h+2000h)+(200h+2000h)=32420h+2200h=34620h
    46                                          
    47                                          ; exit(0)
    48 00000044 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000046 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 20                          a db 20h
    15 00000001 0002                        b dw 200h
    16 00000003 40440300                    c dd 34440h
    17 00000007 0020000000000000            d dq 2000h
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; adunari si scaderi setul 1
    22                                          ; 1.c-(a+d)+(b+d)=34440h- (20h+2000h)+(200h+2000h)=32420h-2200h=30220h
    23                                          ; a - byte, b - word, c - double word, d - qword - Interpretare fara semn
    24 00000000 A0[00000000]                    mov AL,[a]
    25 00000005 B400                            mov AH,0 ;AX=a
    26 00000007 66BA0000                        mov DX,0 ;DX:AX=a
    27 0000000B 6652                            push DX
    28 0000000D 6650                            push AX
    29 0000000F 58                              pop EAX ;EAX=a
    30 00000010 BA00000000                      mov EDX,0 ;EDX:EAX=a
    31 00000015 8B1D[07000000]                  mov EBX,dword[d+0]
    32 0000001B 8B0D[0B000000]                  mov ECX,dword[d+4] ;ECX:EBX=d
    33 00000021 01C3                            add EBX,EAX
    34 00000023 11D1                            adc ECX,EDX ;ECX:EBX=a+d=2020h
    35 00000025 A1[03000000]                    mov EAX,[c];EAX=c
    36 0000002A BA00000000                      mov EDX,0;EDX:EAX=c
    37 0000002F 29D8                            sub EAX,EBX ;
    38 00000031 19CA                            sbb EDX,ECX ;EDX:EAX=c-(a+d)=34440h-2020h=32420h
    39 00000033 668B1D[01000000]                mov BX,[b]
    40 0000003A 66B90000                        mov CX,0 ;CX:BX=b
    41 0000003E 6651                            push CX
    42 00000040 6653                            push BX
    43 00000042 5B                              pop EBX ; EBX=b=200h
    44 00000043 B900000000                      mov ECX,0 ;ECX:EBX=b
    45 00000048 031D[07000000]                  add EBX,dword[d+0]
    46 0000004E 130D[0B000000]                  adc ECX,dword[d+4]; ECX:EBX=b+d=200h+2000h=2200h
    47 00000054 01D8                            add EAX,EBX
    48 00000056 11CA                            adc EDX,ECX; EDX:EAX=c-(a+d)+(b+d)=34440h- (20h+2000h)+(200h+2000h)=32420h+2200h=34620h
    49                                          
    50                                    
    51                                          ; exit(0)
    52 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    53 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 2B3432614033242A            s db '+', '4', '2', 'a', '@', '3', '$', '*'     ;S: '+', '4', '2', 'a', '@', '3', '$', '*'
    15                                      ls equ $-s;ls=lungimea sirului s=8
    16 00000008 21402324255E262A            l db '!', '@', '#', '$', '%', '^', '&', '*' ;l=sirul de caractere care trebuie scoase din s si puse in d
    17                                      ls2 equ $-l;ls2=lungime sirului l=8
    18 00000010 00<rept>                    d times ls db 0;d=sirul pe care vrem sa l obtinem
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;Se da un sir de caractere S. Sa se construiasca sirul D care sa contina toate caracterele speciale (!@#$%^&*) din sirul S
    24 00000000 BB00000000                      mov EBX,0;EBX=0=contor pentru sirul s
    25 00000005 BA00000000                      mov EDX,0;EDX=0=contor pentru sirul d
    26                                          repeta:
    27 0000000A B900000000                          mov ECX,0;ECX=0=control pentru sirul l
    28                                              repeta2:
    29 0000000F 8A83[00000000]                          mov AL,[s+EBX];AL=elementul de ordin EBX din s
    30 00000015 3A81[08000000]                          cmp AL,[l+ECX];comparam AL cu elementul de ordin ECX din l
    31 0000001B 7512                                    jnz final;sarim peste repeta3 daca instructiunea de cmp anterioara seteaza ZF=0
    32                                                  repeta3:
    33 0000001D 8882[10000000]                              mov [d+EDX],AL;pe pozitia EDX din sirul d il punem pe AL=elementul de ordin EBX din s
    34 00000023 42                                          inc EDX;incrementam EDX pentru ca urmatorul numar sa fie pus pe pozitia urmatoare
    35 00000024 FEC0                                        inc AL;AL=AL+1
    36 00000026 3A83[00000000]                              cmp AL,[s+ebx];comparand AL dupa incrementare cu fosta sa valoare vom seta ZF=0,pentru a iesi din loope
    37 0000002C 41                                          inc ECX;incrementam ECX,deoarece loope face dec ECX, loope sfarsindu se cand ZF=0
    38 0000002D E1DB                                    loope repeta
    39                                                  final
    39          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
    40 0000002F 41                                      inc ECX;comparam ECX cu lungimea sirului l pentru a iesi din repeta2 
    41 00000030 83F908                                  cmp ECX,ls2;comparam ECX cu lungimea sirului l pentru a iesi din repeta2 
    42 00000033 72DA                                jb repeta2
    43 00000035 43                                  inc EBX;comparam EBX cu lungimea sirului s pentru a iesi din repeta
    44 00000036 83FB08                              cmp EBX,ls;comparam EBX cu lungimea sirului s pentru a iesi din repeta
    45 00000039 72CF                            jb repeta      
    46                                          ; exit(0)
    47 0000003B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 0000003D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    49                                   

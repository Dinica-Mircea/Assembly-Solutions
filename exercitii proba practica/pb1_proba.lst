     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fclose,scanf,fread,fprintf,printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import fprintf msvcrt.dll             
    15                                  import printf msvcrt.dll
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 7200                        mod_acces_citire db "r",0
    20 00000002 7700                        mod_acces_afisare db "w",0
    21 00000004 00000000                    descriptor_fis_citire dd 0
    22 00000008 00000000                    descriptor_fis_afisare dd 0
    23                                      
    24 0000000C 6F75747075742E7478-         nume_fisier_afisare db "output.txt",0
    24 00000015 7400               
    25 00000017 257300                      format db "%s",0
    26 0000001A 00                          c db 0
    27                                      len equ 100
    28 0000001B 00<rept>                    text times len db 0
    29 0000007F 00000000                    nume_fisier_citire dd 0
    30                                  
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                          ; ...
    35                                          ;citire nume fisier citire
    36 00000000 68[7F000000]                    push nume_fisier_citire
    37 00000005 68[17000000]                    push format
    38 0000000A FF15[00000000]                  call [scanf]
    39 00000010 83C408                          add esp,4*2
    40                                          ;citire caracter
    41 00000013 68[1A000000]                    push c
    42 00000018 68[17000000]                    push format
    43 0000001D FF15[00000000]                  call [scanf]
    44 00000023 83C408                          add esp,4*2
    45                                          ;deschidere input.txt
    46 00000026 68[00000000]                    push mod_acces_citire
    47 0000002B 68[7F000000]                    push nume_fisier_citire
    48 00000030 FF15[00000000]                  call [fopen]
    49 00000036 83C408                          add esp,4*2
    50 00000039 A3[04000000]                    mov [descriptor_fis_citire],eax
    51                                          ;deschidere output.txt
    52 0000003E 68[02000000]                    push mod_acces_afisare
    53 00000043 68[0C000000]                    push nume_fisier_afisare
    54 00000048 FF15[00000000]                  call [fopen]
    55 0000004E 83C408                          add esp,4*2
    56 00000051 A3[08000000]                    mov [descriptor_fis_afisare],eax
    57                                          ;citire din fisier
    58 00000056 FF35[04000000]                  push dword[descriptor_fis_citire]
    59 0000005C 6A64                            push len
    60 0000005E 6A01                            push 1
    61 00000060 68[1B000000]                    push text
    62 00000065 FF15[00000000]                  call [fread]
    63 0000006B 83C410                          add esp,4*4
    64                                          ;afisare
    65 0000006E 68[1B000000]                    push text
    66 00000073 68[17000000]                    push format
    67 00000078 FF15[00000000]                  call [printf]
    68 0000007E 83C408                          add esp,4*2
    69                                          ;afisare text din fisier
    70 00000081 68[1B000000]                    push text
    71 00000086 68[17000000]                    push format
    72 0000008B FF35[08000000]                  push dword[descriptor_fis_afisare]
    73 00000091 FF15[00000000]                  call [fprintf]
    74 00000097 83C40C                          add esp,4*3
    75                                          ;inchidere
    76 0000009A FF35[08000000]                  push dword[descriptor_fis_afisare]
    77 000000A0 FF15[00000000]                  call [fclose]
    78 000000A6 83C404                          add esp,4*1
    79                                          ;inchidere
    80 000000A9 FF35[04000000]                  push dword[descriptor_fis_citire]
    81 000000AF FF15[00000000]                  call [fclose]
    82 000000B5 83C404                          add esp,4*1
    83                                          ; exit(0)
    84 000000B8 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    85 000000BA FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 02                          a db 2
    15 00000001 03                          b db 3
    16 00000002 04                          c db 4
    17 00000003 0600                        d dw 6
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; 1.((a+b-c)*2 + d-5)*d=((2+3-4)*2+6-5)*6=(2+1)*6=18
    23 00000000 A0[00000000]                     mov AL,[a] ;AL=a=2
    24 00000005 0205[01000000]                   add AL,[b] ;AL=a+b=2+3=5
    25 0000000B 2A05[02000000]                   sub AL,[c] ;AL=a+b-c=5-4=1
    26 00000011 F625[00000000]                   mul BYTE [a] ; AX=AL*2=1*2=2
    27 00000017 660305[03000000]                 add AX,[d] ; AX=AX+d=2+6=8
    28 0000001E 6683E805                         sub AX,5 ;AX=AX-5=8-5=3
    29 00000022 66F725[03000000]                 mul WORD[d]; DX:AX=AX*6=3*6=18
    30                                          ; exit(0)
    31 00000029 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    32 0000002B FF15[00000000]                  call    [exit]       ; call exit to terminate the program

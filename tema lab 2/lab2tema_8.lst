     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 03                          a db 3
    15 00000001 02                          b db 2
    16 00000002 04                          c db 4
    17 00000003 06                          d db 6
    18 00000004 0900                        e dw 9
    19 00000006 0800                        f dw 8
    20 00000008 0900                        g dw 9
    21 0000000A 0A00                        h dw 10
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; 30.100/(e+h-3*a)=100/(9+10-3*3)=100/10=10
    26 00000000 8A25[00000000]                  mov AH,[a]   ;AH=a=3
    27 00000006 B003                            mov AL,3   ;AL=3
    28 00000008 F6E4                            mul AH     ;AX=AL*AH=3*3=9
    29 0000000A 668B1D[04000000]                mov BX,[e]   ;BX=e=9
    30 00000011 66031D[0A000000]                add BX,[h]   ;BX=e+h=9+10=19
    31 00000018 6629C3                          sub BX,AX  ;BX=BX-AX=19-9=10
    32 0000001B B964000000                      mov ECX,100
    33 00000020 51                              push ECX
    34 00000021 6658                            pop AX
    35 00000023 665A                            pop DX   ;DX:AX=100
    36 00000025 66F7F3                          div BX     ;AX=DX:AX/BX=100/10=10
    37                                          ; exit(0)
    38 00000028 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    39 0000002A FF15[00000000]                  call    [exit]       ; call exit to terminate the program

     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  global citire
    11                                  extern s;transmitem prin variabila globala s
    12                                  import scanf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=public
    16                                      ; ...
    17 00000000 257300                      format db "%s",0;formatul pentru citirea caracterelor
    18                                  ; our code starts here
    19                                  segment code use32 class=public
    20                                          citire:
    21 00000000 68[00000000]                        push dword s
    22 00000005 68[00000000]                        push dword format
    23 0000000A FF15[00000000]                      call [scanf]
    24 00000010 83C408                              add esp,4*2;citim sirul de caractere s
    25                                              
    26 00000013 C3                              ret
